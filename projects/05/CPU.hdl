// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Identify if A-instruction or B-instruction.
    And (a=true, b=instruction[15], out=selectC);

    // C-Instruction
    // Choose whether to operate on M or A.
    Mux16 (a=currA, b=inM, sel=instruction[12], out=secondCompArgument);
    ALU (x=currD, y=secondCompArgument, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=comp, zr=isZero, ng=isNegative);
    // Figure out destinations.
    DMux8Way (in=true, sel=instruction[3..5], a=nullDest, b=setOnlyM, c=setOnlyD, d=setOnlyDM, e=setOnlyA, f=setOnlyAM, g=setOnlyAD, h=setOnlyADM);
    // Should A be updated.
    Or8Way (in[0]=setOnlyA, in[1]=setOnlyAM, in[2]=setOnlyAD, in[3]=setOnlyADM, in[4..7]=false, out=setA);
    // Should D be updated.
    Or8Way (in[0]=setOnlyD, in[1]=setOnlyDM, in[2]=setOnlyAD, in[3]=setOnlyADM, in[4..7]=false, out=setD);
    // Should M be updated.
    Or8Way (in[0]=setOnlyM, in[1]=setOnlyDM, in[2]=setOnlyAM, in[3]=setOnlyADM, in[4..7]=false, out=setM);
    // Update A, D, M.
    Mux16 (a=currA, b=comp, sel=setA, out=cInstructionNextA);
    Mux16 (a=currD, b=comp, sel=setD, out=cInstructionNextD);
    Mux16 (a=inM, b=comp, sel=setM, out=cInstructionOutM);
    // Comp is positive.
    Not (in=isZero, out=isNotZero);
    Not (in=isNegative, out=isNotNegative);
    And (a=isNotNegative, b=isNotZero, out=isPositive);
    // Comp is greater than or equal to zero.
    Or (a=isPositive, b=isZero, out=isGreaterThanOrEqualToZero);
    // Comp is less than or equal to zero.
    Or (a=isNegative, b=isZero, out=isLessThanOrEqualToZero);
    // Figure out jump.
    DMux8Way (in=true, sel=instruction[0..2], a=nullJump, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
    And (a=jgt, b=isPositive, out=successJGT);
    And (a=jeq, b=isZero, out=successJEQ);
    And (a=jge, b=isGreaterThanOrEqualToZero, out=successJGE);
    And (a=jlt, b=isNegative, out=successJLT);
    And (a=jne, b=isNotZero, out=successJNE);
    And (a=jle, b=isLessThanOrEqualToZero, out=successJLE);
    And (a=jmp, b=jmp, out=successJMP);
    // Update PC if jumping.
    Or8Way (in[7]=false, in[6]=successJGT, in[5]=successJEQ, in[4]=successJGE, in[3]=successJLT, in[2]=successJNE, in[1]=successJLE, in[0]=successJMP, out=jmpPC);

    // Handle outputs.
    And16 (a=currPC, b=currPC, out[15]=None1, out[0..14]=pc);
    And16 (a=currA, b=currA, out[15]=None2, out[0..14]=addressM);
    Mux16 (a=inM, b=cInstructionOutM, sel=selectC, out=outM);
    Mux (a=false, b=setM, sel=selectC, out=writeM);

    // Update PC, specializing on jumps and resets.
    And (a=jmpPC, b=selectC, out=performJMP);
    Not (in=performJMP, out=incPC);
    PC (in=currA, load=performJMP, inc=incPC, reset=reset, out=currPC);

    // Update registers.
    Mux16 (a=instruction, b=cInstructionNextA, sel=selectC, out=nextA);
    Mux16 (a=currD, b=cInstructionNextD, sel=selectC, out=nextD);
    Register (in=nextA, load=true, out=currA);
    Register (in=nextD, load=true, out=currD);
}